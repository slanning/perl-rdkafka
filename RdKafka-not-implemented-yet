


### MISCELLANEOUS

int
rd_kafka_brokers_add(RdKafka rk, const char *brokerlist)

# RD_EXPORT RD_DEPRECATED
# void rd_kafka_set_logger(RdKafka rk,
#			  void (*func) (const rd_kafka_t *rk, int level,
#					const char *fac, const char *buf));

void
rd_kafka_set_log_level(RdKafka rk, int level)

void
rd_kafka_log_print(const RdKafka rk, int level, const char *fac, const char *buf)

void
rd_kafka_log_syslog(const RdKafka rk, int level, const char *fac, const char *buf)

int
rd_kafka_outq_len(RdKafka rk)

void
rd_kafka_dump(FILE *fp, RdKafka rk)

int
rd_kafka_thread_cnt()

int
rd_kafka_wait_destroyed(int timeout_ms)


### EXPERIMENTAL API

rd_kafka_resp_err_t
rd_kafka_poll_set_consumer(RdKafka rk)


### EVENTS INTERFACE

#if RD_KAFKA_VERSION >= 0x000902ff

rd_kafka_event_type_t
rd_kafka_event_type(const rd_kafka_event_t *rkev)

const char *
rd_kafka_event_name(const rd_kafka_event_t *rkev)

void
rd_kafka_event_destroy(rd_kafka_event_t *rkev)

const RdKafka::Message
rd_kafka_event_message_next(rd_kafka_event_t *rkev)

## size_t
## rd_kafka_event_message_array(rd_kafka_event_t *rkev, const rd_kafka_message_t **rkmessages, size_t size)

size_t
rd_kafka_event_message_count(rd_kafka_event_t *rkev)

rd_kafka_resp_err_t
rd_kafka_event_error(rd_kafka_event_t *rkev)

const char *
rd_kafka_event_error_string(rd_kafka_event_t *rkev)

void *
rd_kafka_event_opaque(rd_kafka_event_t *rkev)

int
rd_kafka_event_log(rd_kafka_event_t *rkev, const char **fac, const char **str, int *level)

RdKafka::TopicPartitionList
rd_kafka_event_topic_partition_list(rd_kafka_event_t *rkev)

RdKafka::TopicPartition
rd_kafka_event_topic_partition(rd_kafka_event_t *rkev)

rd_kafka_event_t *
rd_kafka_queue_poll(rd_kafka_queue_t *rkqu, int timeout_ms)

#endif  /* RD_KAFKA_VERSION >= 0x000902ff */
