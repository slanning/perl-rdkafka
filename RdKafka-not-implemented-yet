
### QUEUE API

rd_kafka_queue_t *
rd_kafka_queue_new(rd_kafka_t *rk)

void
rd_kafka_queue_destroy(rd_kafka_queue_t *rkqu)

#if RD_KAFKA_VERSION >= 0x000902ff

rd_kafka_queue_t *
rd_kafka_queue_get_main(rd_kafka_t *rk)

rd_kafka_queue_t *
rd_kafka_queue_get_consumer(rd_kafka_t *rk)

void
rd_kafka_queue_forward(rd_kafka_queue_t *src, rd_kafka_queue_t *dst)

size_t
rd_kafka_queue_length(rd_kafka_queue_t *rkqu)

void
rd_kafka_queue_io_event_enable(rd_kafka_queue_t *rkqu, int fd, const void *payload, size_t size)

#endif


## (simple legacy consumer API is omitted)
## hm, I think we need it for 0.9.1


### KAFKACONSUMER API

rd_kafka_resp_err_t
rd_kafka_subscribe(rd_kafka_t *rk, const rd_kafka_topic_partition_list_t *topics)

rd_kafka_resp_err_t
rd_kafka_unsubscribe(rd_kafka_t *rk)

rd_kafka_resp_err_t
rd_kafka_subscription(rd_kafka_t *rk, rd_kafka_topic_partition_list_t **topics)

rd_kafka_message_t *
rd_kafka_consumer_poll(rd_kafka_t *rk, int timeout_ms)

rd_kafka_resp_err_t
rd_kafka_consumer_close(rd_kafka_t *rk)

rd_kafka_resp_err_t
rd_kafka_assign(rd_kafka_t *rk, const rd_kafka_topic_partition_list_t *partitions)

rd_kafka_resp_err_t
rd_kafka_assignment(rd_kafka_t *rk, rd_kafka_topic_partition_list_t **partitions)

rd_kafka_resp_err_t
rd_kafka_commit(rd_kafka_t *rk, const rd_kafka_topic_partition_list_t *offsets, int async)

rd_kafka_resp_err_t
rd_kafka_commit_message(rd_kafka_t *rk, const rd_kafka_message_t *rkmessage, int async)

#if RD_KAFKA_VERSION >= 0x000902ff

rd_kafka_resp_err_t
rd_kafka_commit_queue(rd_kafka_t *rk, const rd_kafka_topic_partition_list_t *offsets, rd_kafka_queue_t *rkqu, void (*cb) (rd_kafka_t *rk, rd_kafka_resp_err_t err, rd_kafka_topic_partition_list_t *offsets, void *opaque), void *opaque)

#endif

rd_kafka_resp_err_t
rd_kafka_committed(rd_kafka_t *rk, rd_kafka_topic_partition_list_t *partitions, int timeout_ms)

rd_kafka_resp_err_t
rd_kafka_position(rd_kafka_t *rk, rd_kafka_topic_partition_list_t *partitions)


### PRODUCER API

int
rd_kafka_produce(rd_kafka_topic_t *rkt, int32_t partition, int msgflags, void *payload, size_t len, const void *key, size_t keylen, void *msg_opaque)

int
rd_kafka_produce_batch(rd_kafka_topic_t *rkt, int32_t partition, int msgflags, rd_kafka_message_t *rkmessages, int message_cnt)

#if RD_KAFKA_VERSION >= 0x000902ff

rd_kafka_resp_err_t
rd_kafka_flush(rd_kafka_t *rk, int timeout_ms)

#endif

### METADATA API

rd_kafka_resp_err_t
rd_kafka_metadata(rd_kafka_t *rk, int all_topics, rd_kafka_topic_t *only_rkt, const struct rd_kafka_metadata **metadatap, int timeout_ms)

void
rd_kafka_metadata_destroy(const struct rd_kafka_metadata *metadata)


### CLIENT GROUP INFORMATION

rd_kafka_resp_err_t
rd_kafka_list_groups(rd_kafka_t *rk, const char *group, const struct rd_kafka_group_list **grplistp, int timeout_ms)

void
rd_kafka_group_list_destroy(const struct rd_kafka_group_list *grplist)


### MISCELLANEOUS

int
rd_kafka_brokers_add(rd_kafka_t *rk, const char *brokerlist)

# RD_EXPORT RD_DEPRECATED
# void rd_kafka_set_logger(rd_kafka_t *rk,
#			  void (*func) (const rd_kafka_t *rk, int level,
#					const char *fac, const char *buf));

void
rd_kafka_set_log_level(rd_kafka_t *rk, int level)

void
rd_kafka_log_print(const rd_kafka_t *rk, int level, const char *fac, const char *buf)

void
rd_kafka_log_syslog(const rd_kafka_t *rk, int level, const char *fac, const char *buf)

int
rd_kafka_outq_len(rd_kafka_t *rk)

void
rd_kafka_dump(FILE *fp, rd_kafka_t *rk)

int
rd_kafka_thread_cnt()

int
rd_kafka_wait_destroyed(int timeout_ms)


### EXPERIMENTAL API

rd_kafka_resp_err_t
rd_kafka_poll_set_consumer(rd_kafka_t *rk)


### EVENTS INTERFACE

#if RD_KAFKA_VERSION >= 0x000902ff

rd_kafka_event_type_t
rd_kafka_event_type(const rd_kafka_event_t *rkev)

const char *
rd_kafka_event_name(const rd_kafka_event_t *rkev)

void
rd_kafka_event_destroy(rd_kafka_event_t *rkev)

const rd_kafka_message_t *
rd_kafka_event_message_next(rd_kafka_event_t *rkev)

size_t
rd_kafka_event_message_array(rd_kafka_event_t *rkev, const rd_kafka_message_t **rkmessages, size_t size)

size_t
rd_kafka_event_message_count(rd_kafka_event_t *rkev)

rd_kafka_resp_err_t
rd_kafka_event_error(rd_kafka_event_t *rkev)

const char *
rd_kafka_event_error_string(rd_kafka_event_t *rkev)

void *
rd_kafka_event_opaque(rd_kafka_event_t *rkev)

int
rd_kafka_event_log(rd_kafka_event_t *rkev, const char **fac, const char **str, int *level)

rd_kafka_topic_partition_list_t *
rd_kafka_event_topic_partition_list(rd_kafka_event_t *rkev)

rd_kafka_topic_partition_t *
rd_kafka_event_topic_partition(rd_kafka_event_t *rkev)

rd_kafka_event_t *
rd_kafka_queue_poll(rd_kafka_queue_t *rkqu, int timeout_ms)

#endif  /* RD_KAFKA_VERSION >= 0x000902ff */
